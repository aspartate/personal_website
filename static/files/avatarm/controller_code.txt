/*
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp-now-esp8266-nodemcu-arduino-ide/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*/

#include <ESP8266WiFi.h>
#include <espnow.h>

// REPLACE WITH RECEIVER MAC Address
uint8_t broadcastAddress[] = {0xE8, 0xDB, 0x84, 0xC4, 0xC2, 0x87};

// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  int val_1;
  int val_2;
  int val_3;
  int val_4;
} struct_message;

// Create a struct_message called myData
struct_message myData;

int val_pot1 = 0;
int val_pot2 = 0;
int val_pot3 = 0;
int val_pot4 = 0;

unsigned long lastTime = 0;  
unsigned long timerDelay = 50;  // send readings timer

// Callback when data is sent
void OnDataSent(uint8_t *mac_addr, uint8_t sendStatus) {
  Serial.print("Last Packet Send Status: ");
  if (sendStatus == 0){
    Serial.println("Delivery success");
  }
  else{
    Serial.println("Delivery fail");
  }
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(74880);
    
  pinMode(D1, OUTPUT);
  pinMode(D2, OUTPUT);
  pinMode(D3, OUTPUT);
  pinMode(D4, OUTPUT);
  
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  esp_now_add_peer(broadcastAddress, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
}
 
void loop() {
  digitalWrite(D1, HIGH);
  digitalWrite(D2, LOW);
  digitalWrite(D3, LOW);
  digitalWrite(D4, LOW);
  val_pot1 = map(analogRead(A0), 0, 1024, 0, 180);
  delay(5);

  digitalWrite(D1, LOW);
  digitalWrite(D2, HIGH);
  digitalWrite(D3, LOW);
  digitalWrite(D4, LOW);
  val_pot2 = 180 - map(analogRead(A0), 0, 1024, 0, 180);
  delay(5);

  digitalWrite(D1, LOW);
  digitalWrite(D2, LOW);
  digitalWrite(D3, HIGH);
  digitalWrite(D4, LOW);
  val_pot3 = map(analogRead(A0), 0, 1024, 0, 180);
  delay(5);

  digitalWrite(D1, LOW);
  digitalWrite(D2, LOW);
  digitalWrite(D3, LOW);
  digitalWrite(D4, HIGH);
  val_pot4 = 180 - map(analogRead(A0), 0, 1024, 0, 180);
  if (val_pot4 < 0) {
    val_pot4 = 0;
  }
  delay(5);

  Serial.println(val_pot1);
  Serial.println(val_pot2);
  Serial.println(val_pot3);
  Serial.println(val_pot4);

  if ((millis() - lastTime) > timerDelay) {
    // Set values to send
    myData.val_1 = val_pot1;
    myData.val_2 = val_pot2;
    myData.val_3 = val_pot3;
    myData.val_4 = val_pot4;

    // Send message via ESP-NOW
    esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));

    lastTime = millis();
  }
}